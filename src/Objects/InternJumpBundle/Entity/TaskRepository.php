<?php

namespace Objects\InternJumpBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends EntityRepository
{
     /**
     * This query to List All Tasks for certain Student
     * @author Ola
     * @param int $studentId
     * @return array of Tasks
     */
    public function getStudentAllTasks($studentId,$page,$tasksPerPage,$status)
    {
        $em = $this->getEntityManager();
        $para = array();

        if ($page < 1) {
            return array();
        }
        $page--;


       if($status=="inprogress" || $status=="new" || $status=="done" )
        {
           $str= "AND t.status=:status";
           $para['status'] = $status;
        }
        else{ $str=""; }

       $query = $em->createQuery("
                SELECT t.id, t.title, t.status, t.startedAt, t.endedAt, t.description, t.createdAt
                FROM ObjectsInternJumpBundle:Task t
                JOIN t.user u
                WHERE u.id = :id ".$str."
                ");

        $para['id'] = $studentId;
        $query->setParameters($para);

        if ($tasksPerPage) {
            $query->setFirstResult($page * $tasksPerPage);
            $query->setMaxResults($tasksPerPage);
        }

        $result = $query->getResult();

       return $result;
    }

    /**
     * This query to List All Tasks for certain Company
     * @author Ola
     * @param int $companyId
     * @return array of tasks
     */
    public function getCompanyAllTasks($companyId,$page,$tasksPerPage,$status)
    {
        $em = $this->getEntityManager();
        $para = array();
        if ($page < 1) {
            return array();
        }
        $page--;

        if($status=="inprogress" || $status=="new" || $status=="done" )
        {
           $str= "AND t.status=:status";
           $para['status'] = $status;
        }
        else{ $str=""; }

        $query = $em->createQuery("
                SELECT t.id, t.title, t.status, t.startedAt, t.endedAt, t.description
                FROM ObjectsInternJumpBundle:Task t
                JOIN t.company c
                WHERE c.id = :id ".$str."
                ");

        $para['id'] = $companyId;
        $query->setParameters($para);

        if ($tasksPerPage) {
            $query->setFirstResult($page * $tasksPerPage);
            $query->setMaxResults($tasksPerPage);
        }


        $result = $query->getResult();

       return $result;
    }

    /**
     * This query to get a certain Task by id ( used for company show action )
     * @author Ola
     * @param int $id
     * @return a Task
     */
    public function getTaskById($id){
        $em = $this->getEntityManager();
        $query = $em->createQuery("
                SELECT t,u,s
                FROM ObjectsInternJumpBundle:Task t
                JOIN t.user u
                LEFT JOIN u.socialAccounts s
                WHERE t.id = :id
                ");
        $query->setParameter('id',$id);

       try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }

     /**
     * This query to List Company's All Tasks for certain User and status
     * @author Ola
     * @param int $companyId
     * @return array of tasks
     */
    public function getCompanyUserAllTasks($companyId,$userName,$status,$page,$tasksPerPage)
    {
        $em = $this->getEntityManager();
        $para = array();

        if ($page < 1) {
            return array();
        }
        $page--;

        if($status=="inprogress" || $status=="new" || $status=="done" )
        {
           $str= "AND t.status=:status";
           $para['status'] = $status;
        }
        else{ $str=""; }
        $dql="  SELECT t.id, t.title, t.status, t.startedAt, t.endedAt, t.description
                FROM ObjectsInternJumpBundle:Task t
                JOIN t.company c
                JOIN t.user u
                WHERE c.id = :cid AND u.loginName=:uname ".$str."
                ";
        $query = $em->createQuery($dql);
        $para['cid'] = $companyId;
        $para['uname'] = $userName;
        $query->setParameters($para);

        if ($tasksPerPage) {
            $query->setFirstResult($page * $tasksPerPage);
            $query->setMaxResults($tasksPerPage);
        }


        $result = $query->getResult();

       return $result;
    }


    /**
     * this is to count user's tasks all of them without any filter
     * @param type $id
     * @return type
     */
    public function countTasksStandard($id){
        $query = $this->getEntityManager()
                        ->createQuery('
            SELECT count(t.id) as tasksCount
            FROM ObjectsInternJumpBundle:Task t
            JOIN t.user u WHERE u.id = :id
            ')->setParameter('id', $id);

        $result = $query->getResult();
        if ($result)
            return $result['0']['tasksCount'];
        else
            return $result;
    }

    /**
     * this function will count all Tasks (for user or company) according to certain status [this is used in filter]
     * @author Ola
     * $id
     * @param int $id //userId or companyId
     */
    public function countTasks($id,$flag,$status){

        $str="";
        $str1="";
        if($status=="inprogress" || $status=="new" || $status=="done" )
        {
           $str1= "AND t.status='$status'";
           //$para['status'] = $status;
        }

        if($flag == "user")
        { $str="JOIN t.user u WHERE u.id = :id"; }
        elseif ($flag == "company")
        { $str="JOIN t.company c WHERE c.id = :id"; }


        $query = $this->getEntityManager()
                        ->createQuery('
            SELECT count(t.id) as tasksCount
            FROM ObjectsInternJumpBundle:Task t
            '.$str.' '.$str1.'
            ')->setParameter('id', $id);

        $result = $query->getResult();
        if ($result)
            return $result['0']['tasksCount'];
        else
            return $result;

    }



     /**
     * this function will count all Tasks (shared btn User <-> Company))
     * @author Ola
     * $id
     * @param int $id //companyId and userId
     */
    public function countcuTasks($cid,$uid, $status){

                $str1="";
        if($status=="inprogress" || $status=="new" || $status=="done" )
        {
           $str1= "AND t.status='$status'";
           //$para['status'] = $status;
        }

        $query = $this->getEntityManager()
                        ->createQuery('
            SELECT count(t.id) as tasksCount
            FROM ObjectsInternJumpBundle:Task t
            JOIN t.company c
            JOIN t.user u
            WHERE c.id = :cid AND u.id = :uid '.$str1.'
            ')->setParameters(array('cid'=> $cid, 'uid' => $uid));

        $result = $query->getResult();
        if ($result)
            return $result['0']['tasksCount'];
        else
            return $result;

    }

}