<?php

namespace Objects\InternJumpBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserNotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserNotificationRepository extends EntityRepository
{

    /**
     * This Query to Get User's latest 3 notifications
     * Used: in user portal page  [TaskController:studentAllTasksAction] AT studentTasks.html.twig
     * @author Ola
     */
    public function getLatestThree($userId) {

        $parmeters = array();

        $parmeters ['id'] = $userId;

        $query = "
                SELECT n
                FROM ObjectsInternJumpBundle:UserNotification n
                JOIN n.user u
                WHERE u.id = :id
                ORDER BY n.createdAt DESC
                ";
        $query = $this->getEntityManager()->createQuery($query);
        $query->setParameters($parmeters);
        $query->setMaxResults(3);

        return $query->getResult();
    }


    /**
     * this function will get user notifications
     * @author Ahmed
     * @param int $userId
     * @param int $page
     * @param int $itemsPerPage
     * @param string $type
     */
    public function getUserNotifications($userId, $type = null, $page, $itemsPerPage) {
        if ($page < 1) {
            return array();
        }
        $page--;
        $query = "
                SELECT n
                FROM ObjectsInternJumpBundle:UserNotification n
                JOIN n.user u
                WHERE u.id = :id
                ";

        $parmeters = array();

        if($type){
            $query .= ' and n.type = :type';
            $parmeters ['type'] = $type;
        }

        $query .= ' order by n.createdAt desc';

        $parmeters ['id'] = $userId;

        $query = $this->getEntityManager()->createQuery($query);
        $query->setParameters($parmeters);

        if ($itemsPerPage) {
            $query->setFirstResult($page * $itemsPerPage);
            $query->setMaxResults($itemsPerPage);
        }

        return $query->getResult();
    }

    /**
     * this function will count all user notifications
     * @author Ahmed
     * @param int $userId
     */
    public function countAllUserNotifications($userId){
        $query = "
                SELECT count(n.id) as notficiationsCount
                FROM ObjectsInternJumpBundle:UserNotification n
                JOIN n.user u
                WHERE u.id = :id and n.isNew = true
                ";
        $parmeters ['id'] = $userId;
        $query = $this->getEntityManager()->createQuery($query);
        $query->setParameters($parmeters);
        $result = $query->getResult();
        if($result){
            return $result['0']['notficiationsCount'];
        }else{
            return $result;
        }
    }

    /**
     * this function will count user notifications by group by notification type
     * @author Ahmed
     * @param int $userId
     */
    public function countUserNotifications($userId){
        $query = "
                SELECT count(n.id) as notficiationsCount,n.type
                FROM ObjectsInternJumpBundle:UserNotification n
                JOIN n.user u
                WHERE u.id = :id and n.isNew = true
                group by n.type
                ";
        $parmeters ['id'] = $userId;
        $query = $this->getEntityManager()->createQuery($query);
        $query->setParameters($parmeters);
        return $query->getResult();
    }
}