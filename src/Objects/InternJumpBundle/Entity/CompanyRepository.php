<?php

namespace Objects\InternJumpBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompanyRepository extends EntityRepository {

    /**
     * get no tasks active companies from 3,7,15 days
     * @author ahmed
     * @param datetime $threeDate
     * @param datetime $sevenDate
     * @param datetime $fifteenDate
     * @param int $roleActiveCompanyId
     */
    public function getNoTasksCompanies($threeDate, $sevenDate, $fifteenDate, $roleActiveCompanyId) {
        $query = $this->getEntityManager()->createQuery("
            select c.email,c.id,c.loginName,uj.id,
                   (select count(t.id) from ObjectsInternJumpBundle:Task t where t.company = c.id ) as tasksCount
            From ObjectsInternJumpBundle:UserInternship uj
            join uj.internship j
            join j.company c
            join c.companyRoles r
            where r.id = :roleId and ( c.createdAt = :threeDate or c.createdAt = :sevenDate or c.createdAt = :fifteenDate )
            having tasksCount = 0
            ")->setParameters(array(
            'roleId' => $roleActiveCompanyId,
            'threeDate' => $threeDate,
            'sevenDate' => $sevenDate,
            'fifteenDate' => $fifteenDate
        ));

        return $query->getResult();
    }

    /**
     * get no jobs active companies from 3,7,15 days
     * @author ahmed
     * @param datetime $threeDate
     * @param datetime $sevenDate
     * @param datetime $fifteenDate
     * @param int $roleActiveCompanyId
     */
    public function getNoJobsCompanies($threeDate, $sevenDate, $fifteenDate, $roleActiveCompanyId) {
        $query = $this->getEntityManager()->createQuery("
            select c.email,c.id,c.loginName,
                   (select count(j.id) from ObjectsInternJumpBundle:Internship j where j.company = c.id ) as jobsCount
            From ObjectsInternJumpBundle:Company c
            join c.companyRoles r
            where r.id = :roleId and ( c.createdAt = :threeDate or c.createdAt = :sevenDate or c.createdAt = :fifteenDate )
            having jobsCount = 0
            ")->setParameters(array(
            'roleId' => $roleActiveCompanyId,
            'threeDate' => $threeDate,
            'sevenDate' => $sevenDate,
            'fifteenDate' => $fifteenDate
        ));

        return $query->getResult();
    }

    /**
     * get not active companies from 3,7,15 days
     * @author ahmed
     * @param datetime $threeDate
     * @param datetime $sevenDate
     * @param datetime $fifteenDate
     * @param int $roleActiveId
     */
    public function getNotActiveCompanies($threeDate, $sevenDate, $fifteenDate, $roleActiveId) {
        $query = $this->getEntityManager()->createQuery("
            select c From ObjectsInternJumpBundle:Company c
            join c.companyRoles r
            where r.id = :roleId and ( c.createdAt = :threeDate or c.createdAt = :sevenDate or c.createdAt = :fifteenDate )
            ")->setParameters(array(
            'roleId' => $roleActiveId,
            'threeDate' => $threeDate,
            'sevenDate' => $sevenDate,
            'fifteenDate' => $fifteenDate
        ));

        return $query->getResult();
    }

    /**
     * this function will get latest internships for company
     * @author Ahmed
     * @param int $id
     * @param int $maxResults
     */
    public function getLatestjobs($id, $maxResults) {
        $query = $this->getEntityManager()
                        ->createQuery('
            SELECT j
            FROM ObjectsInternJumpBundle:Internship j
            WHERE j.active = true and j.activeTo >= :todayDate and j.company = :id
            ORDER BY j.createdAt DESC
            ')->setMaxResults($maxResults)->setParameters(array('todayDate' => new \DateTime(), 'id' => $id));
        return $query->getResult();
    }

    /**
     * search for a company
     * the main use in CompanyController:searchForCompanyAction
     * @author Mahmoud
     * @param integer $queryString
     * @param integer $orderBy
     * @param integer $orderDirection
     * @param integer $page
     * @param integer $maxResults
     * @return array the count index contains the count of returned objects, the entities index contains the objects
     */
    public function searchForCompany($queryString, $orderBy, $orderDirection, $page = 1, $maxResults = 10) {
        $data = array(
            'count' => 0,
            'enities' => array()
        );
        if ($page >= 1) {
            $page--;
            $mainQuery = '
                FROM ObjectsInternJumpBundle:Company c
                WHERE c.name LIKE :queryString
                AND c.locked = 0
                AND c.enabled = 1';
            $parameters = array('queryString' => "%$queryString%");
            $query = $this->getEntityManager()->createQuery("SELECT c $mainQuery ORDER BY c." . $orderBy . " $orderDirection")->setParameters($parameters);
            $countQuery = $this->getEntityManager()->createQuery("SELECT COUNT(c.id) $mainQuery")->setParameters($parameters);
            $query->setFirstResult($page * $maxResults);
            $query->setMaxResults($maxResults);
            $result = $countQuery->getResult();
            $data['count'] = $result[0][1];
            $data['entities'] = $query->getResult();
        }
        return $data;
    }

    /**
     * get the industry companies
     * the main use in CompanyController:industryCompaniesAction
     * @author Mahmoud
     * @param integer $industryId
     * @param integer $orderBy
     * @param integer $orderDirection
     * @param integer $page
     * @param integer $maxResults
     * @return array the count index contains the count of returned objects, the entities index contains the objects
     */
    public function getIndustryCompanies($industryId, $orderBy, $orderDirection, $page = 1, $maxResults = 10) {
        $data = array(
            'count' => 0,
            'enities' => array()
        );
        if ($page >= 1) {
            $page--;
            $mainQuery = '
                FROM ObjectsInternJumpBundle:Company c
                JOIN c.professions p
                JOIN c.companyRoles r
                WHERE p.id = :industryId
                AND r.name in(:activeRoleName)
                AND c.locked = 0
                AND c.enabled = 1';
            $parameters = array('industryId' => $industryId, 'activeRoleName' => 'ROLE_COMPANY');
            $query = $this->getEntityManager()->createQuery("SELECT c $mainQuery ORDER BY c." . $orderBy . " $orderDirection")->setParameters($parameters);
            $countQuery = $this->getEntityManager()->createQuery("SELECT COUNT(c.id) $mainQuery")->setParameters($parameters);
            $query->setFirstResult($page * $maxResults);
            $query->setMaxResults($maxResults);
            $result = $countQuery->getResult();
            $data['count'] = $result[0][1];
            $data['entities'] = $query->getResult();
        }
        return $data;
    }

    /**
     * to get all companys
     * @author Ola
     * @param int $companyId
     */
    public function getAllCompanys() {
        $query = $this->getEntityManager()
                ->createQuery('
            SELECT c.id, c.name
            FROM ObjectsInternJumpBundle:Company c
            WHERE c.locked = 0
            AND c.enabled = 1
            ');
        return $query->getResult();
    }

}